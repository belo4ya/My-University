-- –í–∞—Ä–∏–∞–Ω—Ç-9
module Task2 where

import Data.List (transpose)
import Data.Ratio ((%))

-- 1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –Ω–∞ –≤—Ö–æ–¥ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ n –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π n —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.
-- –°–ø–∏—Å–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ä—è–¥–∞ –¢—ç–π–ª–æ—Ä–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ exp(x).
-- e^x = 1 + x / 1! + x^2 / 2! + x^3 / 3! + ... + x^n / n! + ...

-- –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ? –†–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —á–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–∞–Ω—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (—Å–º. –Ω–∏–∂–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤)
taylorExp :: Integer -> [Rational]
taylorExp n
  | n < 1 = []
  | otherwise = 1 : [1 % product [1 .. m] | m <- [1 .. n - 1]]

taylorExp' :: Integer -> [Rational]
taylorExp' n
  | n < 1 = []
  | otherwise = map (1 %) f
  where
    f = scanl (*) 1 [1 .. n - 1]

-- 2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
-- –§—É–Ω–∫—Ü–∏—è makePositive, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –∑–Ω–∞–∫ –≤—Å–µ—Ö –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª,
-- –Ω–∞–ø—Ä–∏–º–µ—Ä: makePositive [-1, 0, 5, -10, -20] –¥–∞–µ—Ç [1,0,5,10,20].
makePositive :: [Integer] -> [Integer]
makePositive = map abs

main :: IO ()
main = do
  let n = 10 :: Integer
  putStrLn ("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä—è–¥–∞ –¢—ç–π–ª–æ—Ä–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ exp(x) (n=" ++ show n ++ ")")
  print (taylorExp n)
  let xs = [-1, 0, 5, -10, -20] :: [Integer]
  putStrLn ("\nmakePositive(" ++ show xs ++ ")")
  print (makePositive xs)

-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
-- =====================================================================================================================
-- –°–ø–∏—Å–æ–∫ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
nn :: Int -> [Int]
nn n = [1 .. n]

headNN :: Int -> [Int]
headNN n
  | n < 1 = []
  | n == 1 = [1]
  | otherwise = headNN (n - 1) ++ [n]

tailBackNN :: Int -> [Int]
tailBackNN n
  | n < 1 = []
  | otherwise = f n [n]
  where
    f 1 b = b
    f a b = f (a - 1) ((a - 1) : b)

--tailForwardNN :: Int -> [Int]
--tailForwardNN n
--  | n < 1 = []
--  | otherwise = f 1 [1]
--  where
--    f 10 b = b  -- TODO: n = 10
--    f a b = f (a + 1) (b ++ [a + 1])

tailForwardNN :: Int -> [Int]
tailForwardNN n
  | n < 1 = []
  | otherwise = f 1 [1]
  where
    f a b
      | a == n = b
      | otherwise = f (a + 1) (b ++ [a + 1])

-- –°–ø–∏—Å–æ–∫ –Ω–µ—á–µ—Ç–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
tailBackOddNN :: Int -> [Int]
tailBackOddNN n
  | n < 1 = []
  | otherwise = f n [n * 2 - 1]
  where
    f 1 b = b
    f a b = f (a - 1) ((head b - 2) : b)

-- –°–ø–∏—Å–æ–∫ —á–µ—Ç–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
tailBackEvenNN :: Int -> [Int]
tailBackEvenNN n
  | n < 1 = []
  | otherwise = f n [n * 2]
  where
    f 1 b = b
    f a b = f (a - 1) ((head b - 2) : b)

-- –°–ø–∏—Å–æ–∫ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
headSquaresNN :: Int -> [Int]
headSquaresNN n
  | n < 1 = []
  | otherwise = headSquaresNN (n - 1) ++ [n * n]

tailSquaresNN :: Int -> [Int]
tailSquaresNN n
  | n < 1 = []
  | otherwise = f n [n * n]
  where
    f 1 b = b
    f a b = f c ((c * c) : b)
      where
        c = a - 1

-- –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤. (Big Research üîé)
factorialList :: Integer -> [Integer]
factorialList 0 = [1]
factorialList n = [product [1 .. m] | m <- [1 .. n]]

factorialList' :: Integer -> [Integer]
factorialList' 0 = [1]
factorialList' n = scanl (*) 1 [1 .. n]

headFactorialList :: Integer -> [Integer]
headFactorialList n
  | n < 1 = []
  | otherwise = headFactorialList (n - 1) ++ [f n]
  where
    f 0 = 1
    f a = f (a - 1) * a

tailFactorialList :: Integer -> [Integer] -- TODO: –ø–æ—á–µ–º—É —ç—Ç–æ –Ω–µ –±—ã—Å—Ç—Ä–µ–µ —á–µ–º headFactorialList?
tailFactorialList n
  | n < 1 = []
  | otherwise = f 1 1 [1]
  where
    f a b c
      | a == n = c
      | otherwise = f x y (c ++ [y])
      where
        x = a + 1
        y = b * x

tailBackFactorialList :: Integer -> [Integer]
tailBackFactorialList n
  | n < 1 = []
  | otherwise = f n [product [1 .. n]]
  where
    f 1 b = b
    f a b = f (a - 1) ((head b `div` a) : b)

-- –°–ø–∏—Å–æ–∫ —Å—Ç–µ–ø–µ–Ω–µ–π –¥–≤–æ–π–∫–∏. (–∑–∞—Ö–≤–∞—Ç–∏–ª 0-—é —Å—Ç–µ–ø–µ–Ω—å 2-–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
appendBitPow :: Integer -> [Integer]
appendBitPow n
  | n < 1 = []
  | otherwise = f 1 [1]
  where
    f a b
      | a == n = b
      | otherwise = f (a + 1) (b ++ [last b * 2])

prependBitPow :: Integer -> [Integer]
prependBitPow n
  | n < 1 = []
  | otherwise = f n [2 ^ (n - 1)]
  where
    f 1 b = b
    f a b = f (a - 1) ((head b `div` 2) : b)

-- –°–ø–∏—Å–æ–∫ –±–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤.
binomial :: Integer -> Integer -> Integer
binomial 0 _ = 0
binomial _ 0 = 0
binomial _ 1 = 1
binomial n k = binomial (n - 1) k + binomial (n - 1) (k - 1)

binomialList :: Integer -> [Integer]
binomialList n = [binomial n k | k <- [1 .. n]]

-- –§—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –Ω–∞ –≤—Ö–æ–¥–µ —Å–ø–∏—Å–æ–∫ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –∏ –≤—ã—á–∏—Å–ª—è—é—â—É—é –∏—Ö –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ.
-- –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å–ø–∏—Å–∫—É.
average :: Fractional t => [t] -> t
average = f 0 0
  where
    f s n [] = s / n
    f s n (x : xs) = f (s + x) (n + 1) xs

-- –§—É–Ω–∫—Ü–∏—è –≤—ã—á–ª–µ–Ω–µ–Ω–∏—è n-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
getItem :: [a] -> Int -> a
getItem xs n = xs !! (n - 1)

-- –§—É–Ω–∫—Ü–∏—è —Å–ª–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤.
-- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∏–∑ —Å—É–º–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–æ–≤-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
-- –£—á–µ—Å—Ç—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã.
sumZip :: Num b => [b] -> [b] -> [b]
sumZip as bs = map sum (transpose [as, bs])

-- –§—É–Ω–∫—Ü–∏—è removeOdd, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –≤—Å–µ –Ω–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞.
-- –ù–∞–ø—Ä–∏–º–µ—Ä: removeOdd [1,4,5,6,10] –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å [4,10].
removeOdd :: [Integer] -> [Integer]
removeOdd = filter even

-- –§—É–Ω–∫—Ü–∏—è removeEmpty, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫.
-- –ù–∞–ø—Ä–∏–º–µ—Ä: removeEmpty ["", "Hello", "", "", "World!"] –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ["Hello","World!"].
removeEmpty :: [[Char]] -> [[Char]]
removeEmpty xs = [x | x <- xs, x /= ""]

removeEmpty' :: [[Char]] -> [[Char]]
removeEmpty' = filter (/= "")

-- –§—É–Ω–∫—Ü–∏—è countTrue :: [Bool] -> Integer, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞, —Ä–∞–≤–Ω—ã—Ö True.
countTrue :: [Bool] -> Integer
countTrue = foldl f 0
  where
    f s True = s + 1
    f s False = s

-- –§—É–Ω–∫—Ü–∏—è delete :: Char -> String -> String, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫—É –∏ —Å–∏–º–≤–æ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞.
-- –ü—Ä–∏–º–µ—Ä: delete ‚Äôl‚Äô "Hello world!" –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å "Heo word!".
delete :: Char -> String -> String
delete ch s = [x | x <- s, x /= ch]

-- –§—É–Ω–∫—Ü–∏—è substitute :: Char -> Char -> String -> String, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω—è–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π.
-- –ü—Ä–∏–º–µ—Ä: substitute ‚Äôe‚Äô ‚Äôi‚Äô "eigenvalue" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "iiginvalui"
substitute :: Char -> Char -> String -> String
substitute p r s = [if x == p then r else x | x <- s]

substitute' :: Char -> Char -> String -> String
substitute' p r = map (\ch -> if ch == p then r else ch)
