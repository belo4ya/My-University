-- –í–∞—Ä–∏–∞–Ω—Ç-9
module Task2 where

-- 1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –Ω–∞ –≤—Ö–æ–¥ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ n –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π n —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.
-- –°–ø–∏—Å–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ä—è–¥–∞ –¢—ç–π–ª–æ—Ä–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ exp(x)


-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
-- –°–ø–∏—Å–æ–∫ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
nn :: Int -> [Int]
nn n = [1 .. n]

headNN :: Int -> [Int]
headNN n
  | n < 1 = []
  | n == 1 = [1]
  | otherwise = headNN (n - 1) ++ [n]

tailBackNN :: Int -> [Int]
tailBackNN n
  | n < 1 = []
  | otherwise = nn' n [n]
  where
    nn' 1 b = b
    nn' a b = nn' (a - 1) ((a - 1) : b)

--tailForwardNN :: Int -> [Int]
--tailForwardNN n
--  | n < 1 = []
--  | otherwise = nn' 1 [1]
--  where
--    nn' 10 b = b  -- TODO: n = 10
--    nn' a b = nn' (a + 1) (b ++ [a + 1])

tailForwardNN :: Int -> [Int]
tailForwardNN n
  | n < 1 = []
  | otherwise = nn' 1 [1]
  where
    nn' a b
      | a == n = b
      | otherwise = nn' (a + 1) (b ++ [a + 1])

-- –°–ø–∏—Å–æ–∫ –Ω–µ—á–µ—Ç–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
tailBackOddNN :: Int -> [Int]
tailBackOddNN n
  | n < 1 = []
  | otherwise = oddNN' n [n * 2 - 1]
  where
    oddNN' 1 b = b
    oddNN' a b = oddNN' (a - 1) ((head b - 2) : b)

-- –°–ø–∏—Å–æ–∫ —á–µ—Ç–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
tailBackEvenNN :: Int -> [Int]
tailBackEvenNN n
  | n < 1 = []
  | otherwise = evenNN' n [n * 2]
  where
    evenNN' 1 b = b
    evenNN' a b = evenNN' (a - 1) ((head b - 2) : b)

-- –°–ø–∏—Å–æ–∫ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
headSquaresNN :: Int -> [Int]
headSquaresNN n
  | n < 1 = []
  | otherwise = headSquaresNN (n - 1) ++ [n * n]

tailSquaresNN :: Int -> [Int]
tailSquaresNN n
  | n < 1 = []
  | otherwise = squaresNN' n [n * n]
  where
    squaresNN' 1 b = b
    squaresNN' a b = squaresNN' c ((c * c) : b)
      where
        c = a - 1

-- –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤. (Big Research üîé)
factorialList :: Integer -> [Integer]
factorialList 0 = [1]
factorialList n = [product [1 .. m] | m <- [1 .. n]]

headFactorialList :: Integer -> [Integer]
headFactorialList n
  | n < 1 = []
  | otherwise = headFactorialList (n - 1) ++ [f n]
  where
    f 0 = 1
    f a = f (a - 1) * a

tailFactorialList :: Integer -> [Integer] -- TODO: –ø–æ—á–µ–º—É —ç—Ç–æ –Ω–µ –±—ã—Å—Ç—Ä–µ–µ —á–µ–º headFactorialList?
tailFactorialList n
  | n < 1 = []
  | otherwise = f 1 1 [1]
  where
    f a b c
      | a == n = c
      | otherwise = f x y (c ++ [y])
      where
        x = a + 1
        y = b * x

tailBackFactorialList :: Integer -> [Integer]
tailBackFactorialList n
  | n < 1 = []
  | otherwise = f n [product [1 .. n]]
  where
    f 1 b = b
    f a b = f (a - 1) ((head b `div` a) : b)

-- –°–ø–∏—Å–æ–∫ —Å—Ç–µ–ø–µ–Ω–µ–π –¥–≤–æ–π–∫–∏. (–∑–∞—Ö–≤–∞—Ç–∏–ª 0-—é —Å—Ç–µ–ø–µ–Ω—å 2-–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
appendBitPow :: Integer -> [Integer]
appendBitPow n
  | n < 1 = []
  | otherwise = f 1 [1]
  where
    f a b
      | a == n = b
      | otherwise = f (a + 1) (b ++ [last b * 2])

prependBitPow :: Integer -> [Integer]
prependBitPow n
  | n < 1 = []
  | otherwise = f n [2 ^ (n - 1)]
  where
    f 1 b = b
    f a b = f (a - 1) ((head b `div` 2) : b)

-- –°–ø–∏—Å–æ–∫ –±–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤.
binomial :: Integer -> Integer -> Integer
binomial 0 _ = 0
binomial _ 0 = 0
binomial _ 1 = 1
binomial n k = binomial (n - 1) k + binomial (n - 1) (k - 1)

binomialList :: Integer -> [Integer]
binomialList n = [binomial n k | k <- [1 .. n]]
