c(SELLING, UTILIZATION),
path_to_save = "./Анализ/магазин007/")
plot_trend_lines_by_store(store5$PROFIT,
path_to_save = "./Анализ/магазин005/",
goods = goods[c(1, 2)],
v = T)
plot_trend_lines_by_store(store5$SELLING,
path_to_save = "./Анализ/магазин005/",
goods = goods[c(1, 3)],
v = T)
plot_trend_lines_by_store(store5$UTILIZATION,
path_to_save = "./Анализ/магазин005/",
goods = goods[c(1, 4)],
v = T)
plot_trend_lines_by_store(store6$SELLING,
path_to_save = "./Анализ/магазин006/",
goods = goods[1:4])
plot_trend_lines_by_store(store7$UTILIZATION,
path_to_save = "./Анализ/магазин007/",
goods = goods[1:2])
plot_trend_lines_by_product(store5,
goods[3],
path_to_save = "./Анализ/магазин005/")
plot_trend_lines_by_product(store5,
goods[1],
path_to_save = "./Анализ/магазин005/",
c(PROFIT, SELLING, UTILIZATION),
v = T)
plot_trend_lines_by_product(store6,
goods[1],
path_to_save = "./Анализ/магазин006/",
c(SELLING, UTILIZATION),
v = T)
plot_trend_lines_by_product(store7,
goods[4],
path_to_save = "./Анализ/магазин007/",
c(SELLING, UTILIZATION),
v = T)
plot_store_sum(store5, "./Анализ/магазин005/")
plot_store_sum(store6, "./Анализ/магазин006/")
plot_store_sum(store7, "./Анализ/магазин007/")
plot_revenue_stores(analysis$SELLING, 1, "./Анализ/итог/")
stores <- list()
for (i in 1:store_count) {
stores[i] <- list(get_analysis_by_store(i, "./Анализ", filters = SELLING))
}
plot_revenue_stores_goods(stores, c(1:4), "./Анализ/итог/")
plot_revenue_stores_goods(stores, c(1:3), "./Анализ/итог/")
setwd("D:/RProjects/control-work/")
source("generate_data.R", encoding = "utf-8")
source("analysisV2.R", encoding = "utf-8")
source("visualizationV2.R", encoding = "utf-8")
# -------------- SETTINGS --------------- #
setwd("D:/RProjects/control-work/BestMilkITWRLD")
store_name = "Магазин"
store_count = 8
days = 30
goods = c("хлеб_ч",
"хлеб_ч_н",
"хлеб_б",
"хлеб_б_н")
sale_level = c(70, 88, 75, 85)
# ------------- CREATE DATA ------------- #
for (i in 1:store_count) {
store = paste0("./", store_name ,i)
dir.create(store)
gen.supply(paste0(store, "/"), days = days, goods = goods)
gen.sale(paste0(store, "/"), days = days, goods = goods, sale_level = sale_level)
}
# ------------ ANALYSIS DATA ------------ #
analysis <- get_analysis_by_param("./Анализ", w = T)
store5 <- get_analysis_by_store(5, "./Анализ", w = T)
store6 <- get_analysis_by_store(6, "./Анализ", w = T)
store7 <- get_analysis_by_store(7, "./Анализ", w = T)
# ------------ VISUALIZATION DATA ------------ #
plot_scatter_plot_by_params(store5,
goods[1],
path_to_save = "./Анализ/магазин005/")
plot_scatter_plot_by_params(store6,
goods[2],
c(REVENUE, PROFIT),
path_to_save = "./Анализ/магазин006/")
plot_scatter_plot_by_params(store7,
goods[4],
c(SELLING, UTILIZATION),
path_to_save = "./Анализ/магазин007/")
plot_trend_lines_by_store(store5$PROFIT,
path_to_save = "./Анализ/магазин005/",
goods = goods[c(1, 2)],
v = T)
plot_trend_lines_by_store(store5$SELLING,
path_to_save = "./Анализ/магазин005/",
goods = goods[c(1, 3)],
v = T)
plot_trend_lines_by_store(store5$UTILIZATION,
path_to_save = "./Анализ/магазин005/",
goods = goods[c(1, 4)],
v = T)
plot_trend_lines_by_store(store6$SELLING,
path_to_save = "./Анализ/магазин006/",
goods = goods[1:4])
plot_trend_lines_by_store(store7$UTILIZATION,
path_to_save = "./Анализ/магазин007/",
goods = goods[1:2])
plot_trend_lines_by_product(store5,
goods[3],
path_to_save = "./Анализ/магазин005/")
plot_trend_lines_by_product(store5,
goods[1],
path_to_save = "./Анализ/магазин005/",
c(PROFIT, SELLING, UTILIZATION),
v = T)
plot_trend_lines_by_product(store6,
goods[1],
path_to_save = "./Анализ/магазин006/",
c(SELLING, UTILIZATION),
v = T)
plot_trend_lines_by_product(store7,
goods[4],
path_to_save = "./Анализ/магазин007/",
c(SELLING, UTILIZATION),
v = T)
plot_store_sum(store5, "./Анализ/магазин005/")
plot_store_sum(store6, "./Анализ/магазин006/")
plot_store_sum(store7, "./Анализ/магазин007/")
plot_revenue_stores(analysis$SELLING, 1, "./Анализ/итог/")
stores <- list()
for (i in 1:store_count) {
stores[i] <- list(get_analysis_by_store(i, "./Анализ", filters = SELLING))
}
plot_revenue_stores_goods(stores, c(1:4), "./Анализ/итог/")
plot_revenue_stores_goods(stores, c(1:3), "./Анализ/итог/")
setwd("D:/RProjects/control-work/")
source("generate_data.R", encoding = "utf-8")
source("analysisV2.R", encoding = "utf-8")
source("visualizationV2.R", encoding = "utf-8")
# -------------- SETTINGS --------------- #
setwd("D:/RProjects/control-work/BSTBreadITWRLD")
store_name = "Магазин"
store_count = 8
days = 30
goods = c("хлеб_ч",
"хлеб_ч_н",
"хлеб_б",
"хлеб_б_н")
# ------------- CREATE DATA ------------- #
for (i in 1:store_count) {
store = paste0("./", store_name ,i)
dir.create(store)
gen.supply(paste0(store, "/"), days = days, goods = goods)
sale_level = tryhard.random(60, 95, length(goods))
print(sale_level)
gen.sale(paste0(store, "/"), days = days, goods = goods, sale_level = sale_level)
}
setwd("./")
source("generate_data.R", encoding = "utf-8")
pwd()
dir()
dir()
setwd("./")
source("generate_data.R", encoding = "utf-8")
source("analysisV2.R", encoding = "utf-8")
source("visualizationV2.R", encoding = "utf-8")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
store_name = "Магазин"
store_count = 8
days = 30
goods = c("хлеб_ч",
"хлеб_ч_н",
"хлеб_б",
"хлеб_б_н")
# ------------- CREATE DATA ------------- #
for (i in 1:store_count) {
store = paste0("./", store_name ,i)
dir.create(store)
gen.supply(paste0(store, "/"), days = days, goods = goods)
sale_level = tryhard.random(60, 95, length(goods))
print(sale_level)
gen.sale(paste0(store, "/"), days = days, goods = goods, sale_level = sale_level)
}
setwd("./")
source("generate_data.R", encoding = "utf-8")
source("analysisV2.R", encoding = "utf-8")
source("visualizationV2.R", encoding = "utf-8")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
setwd("./")
source("generate_data.R", encoding = "utf-8")
source("analysisV2.R", encoding = "utf-8")
source("visualizationV2.R", encoding = "utf-8")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
store_name = "Магазин"
store_count = 8
days = 30
goods = c("хлеб_ч",
"хлеб_ч_н",
"хлеб_б",
"хлеб_б_н")
# ------------- CREATE DATA ------------- #
for (i in 1:store_count) {
store = paste0("./", store_name ,i)
dir.create(store)
gen.supply(paste0(store, "/"), days = days, goods = goods)
sale_level = tryhard.random(60, 95, length(goods))
print(paste0("sale_level:", paste0(sale_level, collapse = ", ")))
gen.sale(paste0(store, "/"), days = days, goods = goods, sale_level = sale_level)
}
# ------------ VISUALIZATION DATA ------------ #
plot.scatter.plot.by.params(store5,
goods[1],
path_to_save = "./Анализ/магазин005/")
# ------------ ANALYSIS DATA ------------ #
analysis <- get.analysis.by.param("./Анализ", w = T)
store5 <- get.analysis.by.store(5, "./Анализ", w = T)
# ------------ ANALYSIS DATA ------------ #
analysis <- get.analysis.by.param("./Анализ", w = T)
setwd("./")
source("generate_data.R", encoding = "utf-8")
source("analysisV2.R", encoding = "utf-8")
source("visualizationV2.R", encoding = "utf-8")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
store_name = "Магазин"
store_count = 8
days = 30
goods = c("хлеб_ч",
"хлеб_ч_н",
"хлеб_б",
"хлеб_б_н")
# ------------- CREATE DATA ------------- #
for (i in 1:store_count) {
store = paste0("./", store_name ,i)
dir.create(store)
gen.supply(paste0(store, "/"), days = days, goods = goods)
sale_level = tryhard.random(60, 95, length(goods))
print(paste0("sale_level: ", paste0(sale_level, collapse = ", ")))
gen.sale(paste0(store, "/"), days = days, goods = goods, sale_level = sale_level)
}
# ------------ ANALYSIS DATA ------------ #
analysis <- get.analysis.by.param("./Анализ", w = T)
store5 <- get.analysis.by.store(5, "./Анализ", w = T)
store6 <- get.analysis.by.store(6, "./Анализ", w = T)
store7 <- get.analysis.by.store(7, "./Анализ", w = T)
# ------------ VISUALIZATION DATA ------------ #
plot.scatter.plot.by.params(store5,
goods[1],
path_to_save = "./Анализ/магазин005/")
plot.scatter.plot.by.params(store6,
goods[2],
c(REVENUE, PROFIT),
path_to_save = "./Анализ/магазин006/")
plot.scatter.plot.by.params(store7,
goods[4],
c(SELLING, UTILIZATION),
path_to_save = "./Анализ/магазин007/")
plot.trend.lines.by.store(store5$PROFIT,
path_to_save = "./Анализ/магазин005/",
goods = goods[2],
v = T)
plot.trend.lines.by.store(store5$SELLING,
path_to_save = "./Анализ/магазин005/",
goods = goods[c(1, 3)])
plot.trend.lines.by.store(store5$UTILIZATION,
path_to_save = "./Анализ/магазин005/",
goods = goods[c(1, 4)])
plot.trend.lines.by.store(store6$SELLING,
path_to_save = "./Анализ/магазин006/",
goods = goods[1:4])
plot.trend.lines.by.store(store7$UTILIZATION,
path_to_save = "./Анализ/магазин007/",
goods = goods[1:2])
plot.trend.lines.by.product(store5,
goods[3],
path_to_save = "./Анализ/магазин005/")
plot.trend.lines.by.product(store5,
goods[1],
path_to_save = "./Анализ/магазин005/",
c(SELLING, UTILIZATION, PROFITABILITY))
plot.trend.lines.by.product(store5,
goods[1],
path_to_save = "./Анализ/магазин005/",
c(PROFIT, REVENUE))
plot.trend.lines.by.product(store6,
goods[1],
path_to_save = "./Анализ/магазин006/",
c(PROFIT, REVENUE))
plot.trend.lines.by.product(store7,
goods[4],
path_to_save = "./Анализ/магазин007/",
c(SELLING, UTILIZATION))
plot.store.sum(store5, "./Анализ/магазин005/")
plot.store.sum(store6, "./Анализ/магазин006/")
plot.store.sum(store7, "./Анализ/магазин007/")
plot.revenue.stores(analysis$SELLING, 1, "./Анализ/итог/")
stores <- list()
for (i in 1:store_count) {
stores[i] <- list(get_analysis_by_store(i, "./Анализ", filters = SELLING))
}
stores <- list()
for (i in 1:store_count) {
stores[i] <- list(get.analysis.by.store(i, "./Анализ", filters = SELLING))
}
plot.revenue.stores.goods(stores, c(1:4), "./Анализ/итог/")
plot.revenue.stores.goods(stores, c(1:3), "./Анализ/итог/")
source("utils.R", encoding = "UTF-8")
PURCHASE_PRICE <- 100
SALE_PRICE <- 250
UTILIZTION_PRICE <- 20
# ============ вспомогательные функции для week_table ============ #
get_selling <- function(store_out) {
return(sum(as.data.frame(store_out)[2:length(as.data.frame(store_out))]))
}
get_arrival <- function(store_in) {
return(sum(as.data.frame(store_in)[2:length(as.data.frame(store_in))]))
}
get_utilization <- function(store_in, store_out) {
return(get_arrival(store_in)- get_selling(store_out))
}
get_revenue <- function(store_out) {
return(get_selling(store_out) * SALE_PRICE)
}
get_expenses <- function(store_in, store_out) {
purchase_expenses <- get_selling(store_in) * PURCHASE_PRICE
utilization_expenses <- get_utilization(store_in, store_out) * UTILIZTION_PRICE
return(purchase_expenses + utilization_expenses)
}
get_profit <-function(store_in, store_out) {
return(get_revenue(store_out) - get_expenses(store_in, store_out))
}
# рассчитывает колонку "Выручка"
calc_revenue <- function(data_table, data_out) {
for (i in 1:length(data_out)) {
data_table[i, 1] <- get_revenue(data_out[i])
}
revenue <- data_table[1:length(data_out), 1]
data_table[length(data_out) + 1, 1] <- sum(revenue)
data_table[length(data_out) + 2, 1] <- mean(revenue)
return(data_table)
}
# рассчитывает колонку "Прибыль"
calc_profit <- function(data_table, data_in, data_out) {
for (i in 1:length(data_in)) {
data_table[i, 2] <- get_profit(data_in[i], data_out[i])
}
profit <- data_table[1:length(data_out), 2]
data_table[length(data_out) + 1, 2] <- sum(profit)
data_table[length(data_out) + 2, 2] <- mean(profit)
return(data_table)
}
# рассчитывает колонку "Реализация"
calc_selling <- function(data_table, data_out) {
for (i in 1:length(data_out)) {
data_table[i, 3] <- get_selling(data_out[i])
}
selling <- data_table[1:length(data_out), 3]
data_table[length(data_out) + 1, 3] <- sum(selling)
data_table[length(data_out) + 2, 3] <- mean(selling)
return(data_table)
}
# рассчитывает колонку "Списание"
calc_utilization <- function(data_table, data_in, data_out) {
for (i in 1:length(data_out)) {
data_table[i, 4] <- get_utilization(data_in[i], data_out[i])
}
utilization <- data_table[1:length(data_out), 4]
data_table[length(data_out) + 1, 4] <- sum(utilization)
data_table[length(data_out) + 2, 4] <- mean(utilization)
return(data_table)
}
# рассчитывает колонку "Равномерность продаж (sd)"
calc_uniformity_sales <- function(data_table, data_out) {
for (i in 1:length(data_out)) {
data_table[i, 5] <- round(sd(as.data.frame(data_out[i])[,2]), 1)
}
uniformity <- data_table[1:length(data_out), 5]
data_table[length(data_out) + 1, 5] <- sum(uniformity)
data_table[length(data_out) + 2, 5] <- round(mean(uniformity), 1)
return(data_table)
}
# ============ вспомогательные функции для week_table ============ #
# ============ вспомогательные функции для day_table ============ #
find_max_sales <- function(data_table, data_out) {
for (i in 1:length(data_out)) {
data_frame = as.data.frame(data_out[i])
data_table[i, 1] <- max(data_frame[2])
data_table[i, 2] <- which.max(data_frame[[2]])
}
return(data_table)
}
find_min_sales <- function(data_table, data_out) {
for (i in 1:length(data_out)) {
data_frame = as.data.frame(data_out[i])
data_table[i, 3] <- min(data_frame[2])
data_table[i, 4] <- which.min(data_frame[[2]])
}
return(data_table)
}
find_max_utilization <- function(data_table, data_in, data_out) {
for (i in 1:length(data_out)) {
utilization <- as.data.frame(data_in[i])[2] - as.data.frame(data_out[i])[2]
data_table[i, 5] <- max(utilization)
data_table[i, 6] <- which.max(utilization[[1]])
}
return(data_table)
}
# ============ вспомогательные функции для day_table ============ #
if (F) {"
Выполняет анализ на основе in и out файлов и сохраняет итог в файле .csv
Для корректной работы функции данные должны быть в формате:
store\\d+_in.txt и store\\d+_out.txt; count(*in.txt) == count(*out.txt)
params:
path_to_data: путь к директории, в которой хранятся файлы *in.txt, *out.txt
path_to_save: путь к директории, в которой будет сохранен итог анализа
joined: если TRUE - сохраняет большую таблицу
week: если TRUE - сохраняет таблицу за неделю
day: если TRUE - сохраняет таблицу по дням
"}
do_analysis_to_csv <- function(path_to_data, path_to_save = path_to_data,
joined = T, week = F, day = F) {
files <- dir(path = path_to_data)
store_names <- unique(unlist(strsplit(files, "_")))
store_names <- store_names[grep("store*", store_names)]
store_names <- sub("store", "Магазин ", store_names)
data_in <- read.tables(paste0(path_to_data, "/", files[grep("*in.txt", files)]))
data_out <- read.tables(paste0(path_to_data, "/", files[grep("*out.txt", files)]))
week_table <- create.table(
c("Выручка", "Прибыль", "Реализация",
"Списание", "Равномерность продаж (sd)"),
c(store_names, c("Итого", "Среднее"))
)
day_table <- create.table(
c("Продажи макс", "День", "Продажи мин", "День",
"Списание макс", "День"), store_names
)
week_table <- calc_revenue(week_table, data_out)
week_table <- calc_profit(week_table, data_in, data_out)
week_table <- calc_selling(week_table, data_out)
week_table <- calc_utilization(week_table, data_in, data_out)
week_table <- calc_uniformity_sales(week_table, data_out)
day_table <- find_max_sales(day_table, data_out)
day_table <- find_min_sales(day_table, data_out)
day_table <- find_max_utilization(day_table, data_in, data_out)
day_table_copy <- day_table
day_table_copy[length(store_names) + 1, 1] <- NA
day_table_copy[length(store_names) + 2, 1] <- NA
joined_table <- cbind(week_table, day_table_copy)
if (week) write.csv2(
week_table, paste0(path_to_save, "/week_table.csv"))
if (day) write.csv2(
day_table, paste0(path_to_save, "/day_table.csv"))
if (joined || (!week && !day && !joined)) write.csv2(
joined_table,paste0(path_to_save, "/join.csv"))
}
do_analysis_to_csv("D:/RProjects/control-work/BSTBreadITWRLD/Анализ")
source("visualizationV2.R", encoding = "utf-8")
setwd("./")
source("generate_data.R", encoding = "utf-8")
source("analysisV2.R", encoding = "utf-8")
source("visualizationV2.R", encoding = "utf-8")
plot.store.sum(store5, "./Анализ/магазин005/")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
plot.store.sum(store5, "./Анализ/магазин005/")
plot.store.sum(store6, "./Анализ/магазин006/")
plot.store.sum(store7, "./Анализ/магазин007/")
setwd("./")
source("generate_data.R", encoding = "utf-8")
source("analysisV2.R", encoding = "utf-8")
source("visualizationV2.R", encoding = "utf-8")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
plot.store.sum(store5, "./Анализ/магазин005/")
plot.store.sum(store6, "./Анализ/магазин006/")
plot.store.sum(store7, "./Анализ/магазин007/")
setwd("..")
source("visualizationV2.R", encoding = "utf-8")
plot.store.sum(store5, "./Анализ/магазин005/")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
plot.store.sum(store5, "./Анализ/магазин005/")
setwd("..")
source("visualizationV2.R", encoding = "utf-8")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
plot.store.sum(store5, "./Анализ/магазин005/")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
setwd("..")
source("visualizationV2.R", encoding = "utf-8")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
plot.store.sum(store5, "./Анализ/магазин005/")
setwd("..")
source("visualizationV2.R", encoding = "utf-8")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
plot.store.sum(store5, "./Анализ/магазин005/")
setwd("..")
source("visualizationV2.R", encoding = "utf-8")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
setwd("..")
source("visualizationV2.R", encoding = "utf-8")
# -------------- SETTINGS --------------- #
setwd("./BSTBreadITWRLD")
plot.store.sum(store5, "./Анализ/магазин005/")
plot.store.sum(store6, "./Анализ/магазин006/")
plot.store.sum(store7, "./Анализ/магазин007/")
